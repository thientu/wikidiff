var db = 'telegraf'
var rp = 'autogen'
var measurement = 'rabbitmq_queue'
var groupBy = []
var whereFilter = lambda: TRUE
var period = 20s
var every = 30s
var name = 'Untitled Rule'
var idVar = name + ':{{.Group}}'
var message = '{"direction": true}'
var idTag = 'alertID'
var levelTag = 'level'
var messageField = 'message'
var durationField = 'duration'
var outputDB = 'chronograf'
var outputRP = 'autogen'
var outputMeasurement = 'alerts'
var triggerType = 'threshold'
var crit = 1

var data = stream
    |from()
        .database(db)
        .retentionPolicy(rp)
        .measurement(measurement)
        .groupBy(groupBy)
        .where(whereFilter)
    |window()
        .period(period)
        .every(every)
        .align()
    |median('messages_ready')
        .as('value')

var trigger = data
    |alert()
        .crit(lambda: "value" < crit)
        .message(message)
        .id(idVar)
        .idTag(idTag)
        .levelTag(levelTag)
        .messageField(messageField)
        .durationField(durationField)
        .post('http://54.171.93.124:8000/handle/autodetect_swarm/wiki_worker/up')

trigger
    |influxDBOut()
        .create()
        .database(outputDB)
        .retentionPolicy(outputRP)
        .measurement(outputMeasurement)
        .tag('alertName', name)
        .tag('triggerType', triggerType)

trigger
    |httpOut('output')

